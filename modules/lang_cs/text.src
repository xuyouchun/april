#! tools/text2cpp.py

//-------- ---------- ---------- ---------- ----------
__pattern

#----------------------------------------

# Import statement.
$import: (from from:$mname)? import import:$mname (as name)? \; ;

# Constant values.
$cvalue: cvalue | true | false | null;

# Array index or Property index.
$index:  $_single_expression [ $arguments? ] ;

# Function name, Can be a real name or any expressions.
$_function_name_expression: (
    name $generic_args? | base | this | $index | $function | $new | $type_cast_exp
);

# Function calling expression.
$function: $_function_name_expression \( $arguments? \) ;

# New object expression.
$new: new $type_name (\( $arguments? \) | (\( $arguments? \))? { $_init_args? }) ;

# Array initializer, such as: new int[] { 1, 2, 3 } .
$array_initializer: { ($__item: $array_initializer | $expression) (, $__item)* ,? } ;

# Array lengths, such as: new int[10, 20] .
$array_lengths: $expression? (, $expression? )* ;

# New array expression, such as: new int[] { 1, 2, 3 }.
$new_array: new $type_name [ $array_lengths? ] $array_initializer? ;

# Typeof expression: typeof(T).
$type_of: typeof \( $type_name \) ;

# Default value expression: default(T).
$default_value: default \( $type_name \) ;

# Type name expression: System.Int32.
$type_name_exp: $type_name ;

# Type cast expression: (T)100 .
$type_cast_exp: \( $type_name \) $_single_expression ;

# Simple expression.
$_single_expression: ($__item:
      name | $cvalue | base | this
    | $index | $function | $new | $new_array | $type_of | $type_cast_exp
    | $default_value | $name_unit
    | \( $_expression (, $_expression)* \)
  ) (. $__item )*
#|
#  $type_name_exp (. $__item )+
;

# Expression, such as a + b * c.
$_expression: 
    $_single_expression
    (
        (
             \+  | -   | \*  | /   | %
          | \+=  | -=  | \*= | /=  | %=
          | =    | ==  | !=  | `>  | >= | `< | <=
          | <<   | <<= | >>  | >>=
          | &&   | \|\|
          | \|   | ^   | &   | \|= | &= | ^=
          | \?\? | \?\?=
        ) $_expression                                  # binary operator
      | ( as | is ) $type_name_exp                      # as/is type
      | \? $_expression `\: $_expression                # xxx? xxx : xxx   ? :
      | (\+\+ | --)                                     # right unary operator
    )*
    | (`\+ | `- | `\+\+ | `-- | ! | ~ ) $_expression    # left unary operator
;

# Expression, such as a + b * c.
$expression:  $_expression ;

# Multipy expressions, such as (a + b, c + d).
$expressions: $expression (, $expression)* ;

# Namespace statement.
$namespace:
    namespace $mname
    {
        $using*
        ($namespace | $type | $type_def)*
    }
;

# Using statement: using System; .
$using: using (name =)? $mname \; ;

# Multipy name: System.Text.StringBuilder .
$mname: name ( . name ) * ;

# Decorates of type or members.
$decorate: 
    (
      ($__complex: protected internal | internal protected | private protected | protected private)
      | public | private | protected | internal
      | static | sealed | abstract | readonly | const | new | abstract | override | virtual | extern
    )*
;

# Fields of enum types.
$_enum_fields:
    ( ($__item: $attributes name (= $expression)?) (, $__item)* ,? )?
;

# Type.
$type:
    $attributes
    $decorate
    (
        (class | struct | interface) name $generic_params? (\: base:$type_name (, base:$type_name)*)?
            $generic_constraints
        {
            ($method | $field | $property | $event | $type | $_fields | $type_def) * 
        }
    |
        enum name (\: underlying:$type_name)?
        {
            $_enum_fields
        }
    ) \;?
;

# Type name units, such as: MyStruct, MyClass<int, long> .
$name_unit: name $generic_args? ;

# General type name.
$general_type_name:
        (global? \:\:)? $name_unit (. $name_unit)*
     |  void | object
     |  char | string | byte | sbyte | short | ushort | int | uint | long | ulong | bool
     |  double | float | decimal
;

# Array type name, such as int[].
$array_type_name: $type_name [ ,* ] ;       # Array

# Uncertained type name: var.
$uncertain_type_name: var ;

# Type name.
$type_name: $general_type_name | $array_type_name | $uncertain_type_name ;

# Typedef generic param.
$type_def_param: name ...?;

# Typedef generic params: typedef MyClass<int, T> NewType<T>.
$type_def_params: < $type_def_param (, $type_def_param)* > ;

# Typedef: typedef int Integer.
$type_def: $attributes $decorate using name $type_def_params? = $type_name \; ;

# Generic param.
$generic_param:  $attributes (in | out)? name ...?;

# Generic params: MyClass<T, K>.
$generic_params: < $generic_param (, $generic_param)* > ;

# Generic constraint: where T : MyClass.
$generic_constraint:
    where name \: ($__item: $type_name | class | struct | new \( \)) (, $__item *)*  ;

# Generic constraints.
$generic_constraints: $generic_constraint * ;

# Generic argument.
$generic_arg: (out | ref | params)? $type_name name?;

# Generic arguments: MyClass<int, long>.
$generic_args: < $generic_arg? (, $generic_arg?) * ...? !:> ;

# Param of methods.
$param:  $attributes (out | ref | params)? $type_name ...? name (= $expression)? ;

# Params of methods.
$params: $param (, $param)* ;

# Argument of methods calling.
$argument:  $attributes (out | ref)? (name \:)? $expression ;

# Arguments of methods calling.
$arguments: $argument (, $argument)* ;

# Argument for new expressions.
$_init_arg: (name =)? $expression | { ($_init_arg (, $_init_arg)* ,?)? } ;

# Arguments for new expressions: new MyClass { Value1 = 1, Value2 = 2 }.
$_init_args: $_init_arg (, $_init_arg) * ,? ; 

# Attribute type name.
$_attribute_type_name : $general_type_name;

# Attribute group: [EntryPoint, Trace].
$_attribute_group:
    [ ($__item: $_attribute_type_name (
	\(
		(($arguments | ($__assign: name = $expression)) (, $__assign)*)?
	\) )?) (, $__item)* ]
;

# Attributes: [Entrypoint, Trace] [Inline]
$attributes: ($attribute | $_attribute_group) * ;

# Method body.
$method_body: { $statement* } ;

# Operators.
$_operator:
    \+  | -   | \*  | /   | %
  | \+= | -=  | \*= | /=  | %=
  | =   | ==  | !=  | `>  | >= | `< | <=
  | <<  | <<= | >>  | >>=
  | &&  | \|\|
  | \|  | ^   | &   | \|= | &= | ^=
  | \+\+ | -- | ! | ~
;

# Method member.
$method:
    $attributes
    $decorate
    ret:$type_name? ~ ? (owner:$type_name .)?
    ( name | operator ($_operator | overload:$type_name) )
    $generic_params? \( $params? \) ( \: base \( $arguments? \) )?
    $generic_constraints
    ($method_body | \;)
;

# Fields.
$_fields:
    $attributes
    $decorate
    $type_name ($__item: $attributes name (= $expression)? ) (, $__item)* \;
;

# Fake method, used in property/event body.
$_fake_method:
    $attributes $decorate (get | set | add | remove) ($method_body | \;)
;

# Property member.
$property:
    $attributes
    $decorate
    ret:$type_name ((owner:$type_name .)? name | this [ $params ])
    {
        $_fake_method *
    }
;

# Event member.
$event:
    $attributes
    $decorate event
    ret:$type_name (owner:$type_name .)? name
    ({
        $_fake_method *
    } | \; )
;

# While statement.
$while_st:
    while \( $expressions \)
    $statement
;

# Do ... while statement.
$do_while_st:
    do
        $statement
    while \( $expressions \) \;
;

# For statement.
$for_st:
    for \( ($defination_st | initialize:$expressions \; | \;)?
        condition:$expressions? \; increase:$expressions? \)
    $statement
;

# For ... each statement.
$for_each_st:
    foreach \( $type_name name in $expression \)
    $statement
;

# If statement.
$if_st:
    if \( $expressions \)
        if_body:$statement
    (else else_body:$statement)?
;

# Statement collection.
$statements: $statement * ;

# Case in switch.
$case:
    ((case $expression | default) \:)+
        $statements
;

# Switch statement.
$switch_st:
    switch \( $expressions \)
    {
        $case *
    }
;

# Catch in try ... catch ... finally statement.
$catch:
    catch ( \( $type_name name? \) )?
        $statement
;

# Try ... catch ... finally statement.
$try_st:
    try
        try:$statement
    $catch *
    (finally
        finally:$statement)?
;

# Variables defination statememt: int a = 10, b = 20;
$defination_st:
    const? $type_name ($__item: name (= $expression)?) (, $__item)* \;
;

# Expression statement: a = b + c;
$expression_st: $expression \; ;

# Typedef statement: typedef int Integer.
$type_def_st:   $type_def ;

# Break statement.
$break_st:      break \; ;

# Continue statement.
$continue_st:   continue \; ;

# Throw statement.
$throw_st:      throw $expression? \; ;

# Return statement.
$return_st:     return $expression? \; ;

# Goto statement.
$goto_st:       goto name \; ;

# A empty statement.
$empty_st:      \; ;

# Statement group.
$statement_group_st: { $statement * } ;

# Statement.
$statement:
    $do_while_st | $while_st | $for_st | $for_each_st
  | $if_st | $switch_st | $try_st | $empty_st
  | $break_st | $continue_st | $throw_st | $return_st | $goto_st
  | $expression_st | $defination_st | $type_def_st
  | $statement_group_st
;

# Root, entrypoint of code analyzer.
$: $import* $using* ($namespace | $type | $type_def)* ;


