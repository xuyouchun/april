
The first version, 0.10, 2021-10-12

Only can run by interpreter, do not compiled to arch binary code.

#1. All binary/unitary/ternary operators:
    Arithmetic binary operators:    +, -, *, /, %, +=, -=, *=, /=, %=
    Arithmetic unitary operators:   + (positive), - (negative), ++, --
    Bit operators: &, |, ~, &=,|=
    Logic operators: &&, ||, !
    Compare operators: >, <, ==, !=, <=, >=

#2. Expressions, priority of operators:
    a + b, a + b * c
    a += b, a++, ++a,
    a > b
    a | b, a & b, ~a
    a > b? 1 : 2
    a > 1 && a < -1

#3. Array
    int[] arr1   = new int[5];
    int[] arr2   = new int[] { 1, 2, 3, 4, 5 };
    int[,] arr3  = new int[2, 5] { { 1, 2, 3, 4, 5 }, { 6, 7, 8, 9, 0 } };
    int[][] arr4 = new int[][] { { 1, 2 }, { 3, 4, 5 } };

#3. Statements
    if (a > b) { ... }
    for (int k = 0; k < 10; k++) { ... }
    while (a > 10) { ... }
    do { ... } while (a > 10);
    switch (a) { case 1: ...; case 2: ...; default: ...; }

#4. Types: class, struct, field, method, property, index
    class Class1
    {
        public Class1(int a)                // Constructor method.
        {
            this.A = a;
        }

        public int A;                       // Field
        public int[] array = new int[10};

        public int Add(int a, int b)        // Method
        {
            return a + b;
        }

        public int Property1                // Property
        {
            get { return this.A;  }
            set { this.A = value; }
        }

        public int this[int index]          // Index
        {
            get { return array[index];  }
            set { array[index] = value; }
        }

        public int StaticMethod()           // Static method.
        {
            return 100;
        }
    }

#5. Exception

    try
    {
        throw new Exception("An exception");
    }
    catch (Exception ex)
    {
        ...
    }
    finally
    {
        ...
    }


#6. Generic types & methods

    class Class1<T, K>                      // Generic class
    {
        public void Method1<V>()            // Generic method
        {
            ...
        }
    }

#7. Tuple & Variable length generic parameters

    class System.Tuple<TArgs ...> { ... }   // Variable length generic parameters

    System.Tuple<int, long>         tuple1;
    System.Tuple<int, long, short>  tuple2;

#8. Delegate

    class System.Delegate<TArgs ...> { ... }    // Variable length generic parameters

    System.Delegate<void, int, int> func1;      // Reference to methods with prototype void (int, int)
    System.Delegate<int, int, int>  func2;      // Reference to methods with prototype int (int, int)

#9. typedef

    typedef int Int;                        // Simple type defination
    typedef System.Tuple<int, long> Tuple1; // Generic type defination
    typedef Dictionary<int, TValue> IntDirectory<TValue>;   // Type defination using parameters
    typedef Dictionary<int, Dictionary<int, long> > MyDict; // Complex type defination

